// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/delivery/blender.proto

package ai.promoted.proto.delivery;

public interface QualityScoreTermOrBuilder extends
    // @@protoc_insertion_point(interface_extends:delivery.QualityScoreTerm)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A named vector provided from elsewhere.
   * </pre>
   *
   * <code>string attribute_name = 1;</code>
   * @return Whether the attributeName field is set.
   */
  boolean hasAttributeName();
  /**
   * <pre>
   * A named vector provided from elsewhere.
   * </pre>
   *
   * <code>string attribute_name = 1;</code>
   * @return The attributeName.
   */
  String getAttributeName();
  /**
   * <pre>
   * A named vector provided from elsewhere.
   * </pre>
   *
   * <code>string attribute_name = 1;</code>
   * @return The bytes for attributeName.
   */
  com.google.protobuf.ByteString
      getAttributeNameBytes();

  /**
   * <pre>
   * Randomly generated values from a normal distribution.
   * </pre>
   *
   * <code>.delivery.NormalDistribution random_normal = 2;</code>
   * @return Whether the randomNormal field is set.
   */
  boolean hasRandomNormal();
  /**
   * <pre>
   * Randomly generated values from a normal distribution.
   * </pre>
   *
   * <code>.delivery.NormalDistribution random_normal = 2;</code>
   * @return The randomNormal.
   */
  NormalDistribution getRandomNormal();
  /**
   * <pre>
   * Randomly generated values from a normal distribution.
   * </pre>
   *
   * <code>.delivery.NormalDistribution random_normal = 2;</code>
   */
  NormalDistributionOrBuilder getRandomNormalOrBuilder();

  /**
   * <pre>
   * A constant value of ones. Set to any constant with offset and/or weight.
   * Set to "true" to indicate that this option is set by convention.
   * </pre>
   *
   * <code>bool ones = 3;</code>
   * @return Whether the ones field is set.
   */
  boolean hasOnes();
  /**
   * <pre>
   * A constant value of ones. Set to any constant with offset and/or weight.
   * Set to "true" to indicate that this option is set by convention.
   * </pre>
   *
   * <code>bool ones = 3;</code>
   * @return The ones.
   */
  boolean getOnes();

  /**
   * <pre>
   * Maximum limit of underlying value (before weight and offset).
   * </pre>
   *
   * <code>double fetch_high = 10;</code>
   * @return Whether the fetchHigh field is set.
   */
  boolean hasFetchHigh();
  /**
   * <pre>
   * Maximum limit of underlying value (before weight and offset).
   * </pre>
   *
   * <code>double fetch_high = 10;</code>
   * @return The fetchHigh.
   */
  double getFetchHigh();

  /**
   * <pre>
   * Minimum limit of underlying value (before weight and offset).
   * </pre>
   *
   * <code>double fetch_low = 11;</code>
   * @return Whether the fetchLow field is set.
   */
  boolean hasFetchLow();
  /**
   * <pre>
   * Minimum limit of underlying value (before weight and offset).
   * </pre>
   *
   * <code>double fetch_low = 11;</code>
   * @return The fetchLow.
   */
  double getFetchLow();

  /**
   * <pre>
   * Multiply by this value. default =1 (no multiply).
   * </pre>
   *
   * <code>double weight = 12;</code>
   * @return The weight.
   */
  double getWeight();

  /**
   * <pre>
   * Add by this value. default = 0 (no addition)
   * </pre>
   *
   * <code>double offset = 13;</code>
   * @return The offset.
   */
  double getOffset();

  public QualityScoreTerm.FetchMethodCase getFetchMethodCase();
}
