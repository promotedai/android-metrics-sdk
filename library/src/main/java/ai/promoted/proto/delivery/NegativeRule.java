// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/delivery/blender.proto

package ai.promoted.proto.delivery;

/**
 * <pre>
 * Next ID = 6.
 * </pre>
 *
 * Protobuf type {@code delivery.NegativeRule}
 */
public final class NegativeRule extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:delivery.NegativeRule)
    NegativeRuleOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NegativeRule.newBuilder() to construct.
  private NegativeRule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NegativeRule() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new NegativeRule();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NegativeRule(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 9: {
            bitField0_ |= 0x00000001;
            pluckPct_ = input.readDouble();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            forbidLessPos_ = input.readUInt64();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            minSpacing_ = input.readUInt64();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            forbidGreaterPos_ = input.readUInt64();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            maxCount_ = input.readUInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Blender.internal_static_delivery_NegativeRule_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Blender.internal_static_delivery_NegativeRule_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            NegativeRule.class, Builder.class);
  }

  private int bitField0_;
  public static final int PLUCK_PCT_FIELD_NUMBER = 1;
  private double pluckPct_;
  /**
   * <code>double pluck_pct = 1;</code>
   * @return Whether the pluckPct field is set.
   */
  @Override
  public boolean hasPluckPct() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>double pluck_pct = 1;</code>
   * @return The pluckPct.
   */
  @Override
  public double getPluckPct() {
    return pluckPct_;
  }

  public static final int FORBID_LESS_POS_FIELD_NUMBER = 2;
  private long forbidLessPos_;
  /**
   * <code>uint64 forbid_less_pos = 2;</code>
   * @return Whether the forbidLessPos field is set.
   */
  @Override
  public boolean hasForbidLessPos() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>uint64 forbid_less_pos = 2;</code>
   * @return The forbidLessPos.
   */
  @Override
  public long getForbidLessPos() {
    return forbidLessPos_;
  }

  public static final int MIN_SPACING_FIELD_NUMBER = 3;
  private long minSpacing_;
  /**
   * <code>uint64 min_spacing = 3;</code>
   * @return Whether the minSpacing field is set.
   */
  @Override
  public boolean hasMinSpacing() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>uint64 min_spacing = 3;</code>
   * @return The minSpacing.
   */
  @Override
  public long getMinSpacing() {
    return minSpacing_;
  }

  public static final int FORBID_GREATER_POS_FIELD_NUMBER = 4;
  private long forbidGreaterPos_;
  /**
   * <code>uint64 forbid_greater_pos = 4;</code>
   * @return Whether the forbidGreaterPos field is set.
   */
  @Override
  public boolean hasForbidGreaterPos() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>uint64 forbid_greater_pos = 4;</code>
   * @return The forbidGreaterPos.
   */
  @Override
  public long getForbidGreaterPos() {
    return forbidGreaterPos_;
  }

  public static final int MAX_COUNT_FIELD_NUMBER = 5;
  private long maxCount_;
  /**
   * <code>uint64 max_count = 5;</code>
   * @return Whether the maxCount field is set.
   */
  @Override
  public boolean hasMaxCount() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <code>uint64 max_count = 5;</code>
   * @return The maxCount.
   */
  @Override
  public long getMaxCount() {
    return maxCount_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeDouble(1, pluckPct_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeUInt64(2, forbidLessPos_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeUInt64(3, minSpacing_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeUInt64(4, forbidGreaterPos_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeUInt64(5, maxCount_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, pluckPct_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(2, forbidLessPos_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(3, minSpacing_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, forbidGreaterPos_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(5, maxCount_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof NegativeRule)) {
      return super.equals(obj);
    }
    NegativeRule other = (NegativeRule) obj;

    if (hasPluckPct() != other.hasPluckPct()) return false;
    if (hasPluckPct()) {
      if (Double.doubleToLongBits(getPluckPct())
          != Double.doubleToLongBits(
              other.getPluckPct())) return false;
    }
    if (hasForbidLessPos() != other.hasForbidLessPos()) return false;
    if (hasForbidLessPos()) {
      if (getForbidLessPos()
          != other.getForbidLessPos()) return false;
    }
    if (hasMinSpacing() != other.hasMinSpacing()) return false;
    if (hasMinSpacing()) {
      if (getMinSpacing()
          != other.getMinSpacing()) return false;
    }
    if (hasForbidGreaterPos() != other.hasForbidGreaterPos()) return false;
    if (hasForbidGreaterPos()) {
      if (getForbidGreaterPos()
          != other.getForbidGreaterPos()) return false;
    }
    if (hasMaxCount() != other.hasMaxCount()) return false;
    if (hasMaxCount()) {
      if (getMaxCount()
          != other.getMaxCount()) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPluckPct()) {
      hash = (37 * hash) + PLUCK_PCT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getPluckPct()));
    }
    if (hasForbidLessPos()) {
      hash = (37 * hash) + FORBID_LESS_POS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getForbidLessPos());
    }
    if (hasMinSpacing()) {
      hash = (37 * hash) + MIN_SPACING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMinSpacing());
    }
    if (hasForbidGreaterPos()) {
      hash = (37 * hash) + FORBID_GREATER_POS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getForbidGreaterPos());
    }
    if (hasMaxCount()) {
      hash = (37 * hash) + MAX_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMaxCount());
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static NegativeRule parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static NegativeRule parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static NegativeRule parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static NegativeRule parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static NegativeRule parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static NegativeRule parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static NegativeRule parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static NegativeRule parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static NegativeRule parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static NegativeRule parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static NegativeRule parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static NegativeRule parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(NegativeRule prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Next ID = 6.
   * </pre>
   *
   * Protobuf type {@code delivery.NegativeRule}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:delivery.NegativeRule)
      NegativeRuleOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Blender.internal_static_delivery_NegativeRule_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Blender.internal_static_delivery_NegativeRule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              NegativeRule.class, Builder.class);
    }

    // Construct using ai.promoted.proto.delivery.NegativeRule.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      pluckPct_ = 0D;
      bitField0_ = (bitField0_ & ~0x00000001);
      forbidLessPos_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000002);
      minSpacing_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000004);
      forbidGreaterPos_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000008);
      maxCount_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Blender.internal_static_delivery_NegativeRule_descriptor;
    }

    @Override
    public NegativeRule getDefaultInstanceForType() {
      return NegativeRule.getDefaultInstance();
    }

    @Override
    public NegativeRule build() {
      NegativeRule result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public NegativeRule buildPartial() {
      NegativeRule result = new NegativeRule(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.pluckPct_ = pluckPct_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.forbidLessPos_ = forbidLessPos_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.minSpacing_ = minSpacing_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.forbidGreaterPos_ = forbidGreaterPos_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.maxCount_ = maxCount_;
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof NegativeRule) {
        return mergeFrom((NegativeRule)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(NegativeRule other) {
      if (other == NegativeRule.getDefaultInstance()) return this;
      if (other.hasPluckPct()) {
        setPluckPct(other.getPluckPct());
      }
      if (other.hasForbidLessPos()) {
        setForbidLessPos(other.getForbidLessPos());
      }
      if (other.hasMinSpacing()) {
        setMinSpacing(other.getMinSpacing());
      }
      if (other.hasForbidGreaterPos()) {
        setForbidGreaterPos(other.getForbidGreaterPos());
      }
      if (other.hasMaxCount()) {
        setMaxCount(other.getMaxCount());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      NegativeRule parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (NegativeRule) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private double pluckPct_ ;
    /**
     * <code>double pluck_pct = 1;</code>
     * @return Whether the pluckPct field is set.
     */
    @Override
    public boolean hasPluckPct() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>double pluck_pct = 1;</code>
     * @return The pluckPct.
     */
    @Override
    public double getPluckPct() {
      return pluckPct_;
    }
    /**
     * <code>double pluck_pct = 1;</code>
     * @param value The pluckPct to set.
     * @return This builder for chaining.
     */
    public Builder setPluckPct(double value) {
      bitField0_ |= 0x00000001;
      pluckPct_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double pluck_pct = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPluckPct() {
      bitField0_ = (bitField0_ & ~0x00000001);
      pluckPct_ = 0D;
      onChanged();
      return this;
    }

    private long forbidLessPos_ ;
    /**
     * <code>uint64 forbid_less_pos = 2;</code>
     * @return Whether the forbidLessPos field is set.
     */
    @Override
    public boolean hasForbidLessPos() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>uint64 forbid_less_pos = 2;</code>
     * @return The forbidLessPos.
     */
    @Override
    public long getForbidLessPos() {
      return forbidLessPos_;
    }
    /**
     * <code>uint64 forbid_less_pos = 2;</code>
     * @param value The forbidLessPos to set.
     * @return This builder for chaining.
     */
    public Builder setForbidLessPos(long value) {
      bitField0_ |= 0x00000002;
      forbidLessPos_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint64 forbid_less_pos = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearForbidLessPos() {
      bitField0_ = (bitField0_ & ~0x00000002);
      forbidLessPos_ = 0L;
      onChanged();
      return this;
    }

    private long minSpacing_ ;
    /**
     * <code>uint64 min_spacing = 3;</code>
     * @return Whether the minSpacing field is set.
     */
    @Override
    public boolean hasMinSpacing() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>uint64 min_spacing = 3;</code>
     * @return The minSpacing.
     */
    @Override
    public long getMinSpacing() {
      return minSpacing_;
    }
    /**
     * <code>uint64 min_spacing = 3;</code>
     * @param value The minSpacing to set.
     * @return This builder for chaining.
     */
    public Builder setMinSpacing(long value) {
      bitField0_ |= 0x00000004;
      minSpacing_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint64 min_spacing = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinSpacing() {
      bitField0_ = (bitField0_ & ~0x00000004);
      minSpacing_ = 0L;
      onChanged();
      return this;
    }

    private long forbidGreaterPos_ ;
    /**
     * <code>uint64 forbid_greater_pos = 4;</code>
     * @return Whether the forbidGreaterPos field is set.
     */
    @Override
    public boolean hasForbidGreaterPos() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>uint64 forbid_greater_pos = 4;</code>
     * @return The forbidGreaterPos.
     */
    @Override
    public long getForbidGreaterPos() {
      return forbidGreaterPos_;
    }
    /**
     * <code>uint64 forbid_greater_pos = 4;</code>
     * @param value The forbidGreaterPos to set.
     * @return This builder for chaining.
     */
    public Builder setForbidGreaterPos(long value) {
      bitField0_ |= 0x00000008;
      forbidGreaterPos_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint64 forbid_greater_pos = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearForbidGreaterPos() {
      bitField0_ = (bitField0_ & ~0x00000008);
      forbidGreaterPos_ = 0L;
      onChanged();
      return this;
    }

    private long maxCount_ ;
    /**
     * <code>uint64 max_count = 5;</code>
     * @return Whether the maxCount field is set.
     */
    @Override
    public boolean hasMaxCount() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>uint64 max_count = 5;</code>
     * @return The maxCount.
     */
    @Override
    public long getMaxCount() {
      return maxCount_;
    }
    /**
     * <code>uint64 max_count = 5;</code>
     * @param value The maxCount to set.
     * @return This builder for chaining.
     */
    public Builder setMaxCount(long value) {
      bitField0_ |= 0x00000010;
      maxCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint64 max_count = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxCount() {
      bitField0_ = (bitField0_ & ~0x00000010);
      maxCount_ = 0L;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:delivery.NegativeRule)
  }

  // @@protoc_insertion_point(class_scope:delivery.NegativeRule)
  private static final NegativeRule DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new NegativeRule();
  }

  public static NegativeRule getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NegativeRule>
      PARSER = new com.google.protobuf.AbstractParser<NegativeRule>() {
    @Override
    public NegativeRule parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new NegativeRule(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NegativeRule> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<NegativeRule> getParserForType() {
    return PARSER;
  }

  @Override
  public NegativeRule getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

