// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/delivery/blender.proto

package ai.promoted.proto.delivery;

/**
 * <pre>
 * Next ID = 14.
 * </pre>
 *
 * Protobuf type {@code delivery.QualityScoreTerm}
 */
public final class QualityScoreTerm extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:delivery.QualityScoreTerm)
    QualityScoreTermOrBuilder {
private static final long serialVersionUID = 0L;
  // Use QualityScoreTerm.newBuilder() to construct.
  private QualityScoreTerm(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private QualityScoreTerm() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new QualityScoreTerm();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private QualityScoreTerm(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            String s = input.readStringRequireUtf8();
            fetchMethodCase_ = 1;
            fetchMethod_ = s;
            break;
          }
          case 18: {
            NormalDistribution.Builder subBuilder = null;
            if (fetchMethodCase_ == 2) {
              subBuilder = ((NormalDistribution) fetchMethod_).toBuilder();
            }
            fetchMethod_ =
                input.readMessage(NormalDistribution.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((NormalDistribution) fetchMethod_);
              fetchMethod_ = subBuilder.buildPartial();
            }
            fetchMethodCase_ = 2;
            break;
          }
          case 24: {
            fetchMethodCase_ = 3;
            fetchMethod_ = input.readBool();
            break;
          }
          case 81: {
            bitField0_ |= 0x00000001;
            fetchHigh_ = input.readDouble();
            break;
          }
          case 89: {
            bitField0_ |= 0x00000002;
            fetchLow_ = input.readDouble();
            break;
          }
          case 97: {

            weight_ = input.readDouble();
            break;
          }
          case 105: {

            offset_ = input.readDouble();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Blender.internal_static_delivery_QualityScoreTerm_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Blender.internal_static_delivery_QualityScoreTerm_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            QualityScoreTerm.class, Builder.class);
  }

  private int bitField0_;
  private int fetchMethodCase_ = 0;
  private Object fetchMethod_;
  public enum FetchMethodCase
      implements com.google.protobuf.Internal.EnumLite,
          InternalOneOfEnum {
    ATTRIBUTE_NAME(1),
    RANDOM_NORMAL(2),
    ONES(3),
    FETCHMETHOD_NOT_SET(0);
    private final int value;
    private FetchMethodCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static FetchMethodCase valueOf(int value) {
      return forNumber(value);
    }

    public static FetchMethodCase forNumber(int value) {
      switch (value) {
        case 1: return ATTRIBUTE_NAME;
        case 2: return RANDOM_NORMAL;
        case 3: return ONES;
        case 0: return FETCHMETHOD_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public FetchMethodCase
  getFetchMethodCase() {
    return FetchMethodCase.forNumber(
        fetchMethodCase_);
  }

  public static final int ATTRIBUTE_NAME_FIELD_NUMBER = 1;
  /**
   * <pre>
   * A named vector provided from elsewhere.
   * </pre>
   *
   * <code>string attribute_name = 1;</code>
   * @return Whether the attributeName field is set.
   */
  public boolean hasAttributeName() {
    return fetchMethodCase_ == 1;
  }
  /**
   * <pre>
   * A named vector provided from elsewhere.
   * </pre>
   *
   * <code>string attribute_name = 1;</code>
   * @return The attributeName.
   */
  public String getAttributeName() {
    Object ref = "";
    if (fetchMethodCase_ == 1) {
      ref = fetchMethod_;
    }
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      if (fetchMethodCase_ == 1) {
        fetchMethod_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * A named vector provided from elsewhere.
   * </pre>
   *
   * <code>string attribute_name = 1;</code>
   * @return The bytes for attributeName.
   */
  public com.google.protobuf.ByteString
      getAttributeNameBytes() {
    Object ref = "";
    if (fetchMethodCase_ == 1) {
      ref = fetchMethod_;
    }
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      if (fetchMethodCase_ == 1) {
        fetchMethod_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RANDOM_NORMAL_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Randomly generated values from a normal distribution.
   * </pre>
   *
   * <code>.delivery.NormalDistribution random_normal = 2;</code>
   * @return Whether the randomNormal field is set.
   */
  @Override
  public boolean hasRandomNormal() {
    return fetchMethodCase_ == 2;
  }
  /**
   * <pre>
   * Randomly generated values from a normal distribution.
   * </pre>
   *
   * <code>.delivery.NormalDistribution random_normal = 2;</code>
   * @return The randomNormal.
   */
  @Override
  public NormalDistribution getRandomNormal() {
    if (fetchMethodCase_ == 2) {
       return (NormalDistribution) fetchMethod_;
    }
    return NormalDistribution.getDefaultInstance();
  }
  /**
   * <pre>
   * Randomly generated values from a normal distribution.
   * </pre>
   *
   * <code>.delivery.NormalDistribution random_normal = 2;</code>
   */
  @Override
  public NormalDistributionOrBuilder getRandomNormalOrBuilder() {
    if (fetchMethodCase_ == 2) {
       return (NormalDistribution) fetchMethod_;
    }
    return NormalDistribution.getDefaultInstance();
  }

  public static final int ONES_FIELD_NUMBER = 3;
  /**
   * <pre>
   * A constant value of ones. Set to any constant with offset and/or weight.
   * Set to "true" to indicate that this option is set by convention.
   * </pre>
   *
   * <code>bool ones = 3;</code>
   * @return Whether the ones field is set.
   */
  @Override
  public boolean hasOnes() {
    return fetchMethodCase_ == 3;
  }
  /**
   * <pre>
   * A constant value of ones. Set to any constant with offset and/or weight.
   * Set to "true" to indicate that this option is set by convention.
   * </pre>
   *
   * <code>bool ones = 3;</code>
   * @return The ones.
   */
  @Override
  public boolean getOnes() {
    if (fetchMethodCase_ == 3) {
      return (Boolean) fetchMethod_;
    }
    return false;
  }

  public static final int FETCH_HIGH_FIELD_NUMBER = 10;
  private double fetchHigh_;
  /**
   * <pre>
   * Maximum limit of underlying value (before weight and offset).
   * </pre>
   *
   * <code>double fetch_high = 10;</code>
   * @return Whether the fetchHigh field is set.
   */
  @Override
  public boolean hasFetchHigh() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Maximum limit of underlying value (before weight and offset).
   * </pre>
   *
   * <code>double fetch_high = 10;</code>
   * @return The fetchHigh.
   */
  @Override
  public double getFetchHigh() {
    return fetchHigh_;
  }

  public static final int FETCH_LOW_FIELD_NUMBER = 11;
  private double fetchLow_;
  /**
   * <pre>
   * Minimum limit of underlying value (before weight and offset).
   * </pre>
   *
   * <code>double fetch_low = 11;</code>
   * @return Whether the fetchLow field is set.
   */
  @Override
  public boolean hasFetchLow() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Minimum limit of underlying value (before weight and offset).
   * </pre>
   *
   * <code>double fetch_low = 11;</code>
   * @return The fetchLow.
   */
  @Override
  public double getFetchLow() {
    return fetchLow_;
  }

  public static final int WEIGHT_FIELD_NUMBER = 12;
  private double weight_;
  /**
   * <pre>
   * Multiply by this value. default =1 (no multiply).
   * </pre>
   *
   * <code>double weight = 12;</code>
   * @return The weight.
   */
  @Override
  public double getWeight() {
    return weight_;
  }

  public static final int OFFSET_FIELD_NUMBER = 13;
  private double offset_;
  /**
   * <pre>
   * Add by this value. default = 0 (no addition)
   * </pre>
   *
   * <code>double offset = 13;</code>
   * @return The offset.
   */
  @Override
  public double getOffset() {
    return offset_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (fetchMethodCase_ == 1) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, fetchMethod_);
    }
    if (fetchMethodCase_ == 2) {
      output.writeMessage(2, (NormalDistribution) fetchMethod_);
    }
    if (fetchMethodCase_ == 3) {
      output.writeBool(
          3, (boolean)((Boolean) fetchMethod_));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeDouble(10, fetchHigh_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeDouble(11, fetchLow_);
    }
    if (weight_ != 0D) {
      output.writeDouble(12, weight_);
    }
    if (offset_ != 0D) {
      output.writeDouble(13, offset_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (fetchMethodCase_ == 1) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, fetchMethod_);
    }
    if (fetchMethodCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (NormalDistribution) fetchMethod_);
    }
    if (fetchMethodCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            3, (boolean)((Boolean) fetchMethod_));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(10, fetchHigh_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(11, fetchLow_);
    }
    if (weight_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(12, weight_);
    }
    if (offset_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(13, offset_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof QualityScoreTerm)) {
      return super.equals(obj);
    }
    QualityScoreTerm other = (QualityScoreTerm) obj;

    if (hasFetchHigh() != other.hasFetchHigh()) return false;
    if (hasFetchHigh()) {
      if (Double.doubleToLongBits(getFetchHigh())
          != Double.doubleToLongBits(
              other.getFetchHigh())) return false;
    }
    if (hasFetchLow() != other.hasFetchLow()) return false;
    if (hasFetchLow()) {
      if (Double.doubleToLongBits(getFetchLow())
          != Double.doubleToLongBits(
              other.getFetchLow())) return false;
    }
    if (Double.doubleToLongBits(getWeight())
        != Double.doubleToLongBits(
            other.getWeight())) return false;
    if (Double.doubleToLongBits(getOffset())
        != Double.doubleToLongBits(
            other.getOffset())) return false;
    if (!getFetchMethodCase().equals(other.getFetchMethodCase())) return false;
    switch (fetchMethodCase_) {
      case 1:
        if (!getAttributeName()
            .equals(other.getAttributeName())) return false;
        break;
      case 2:
        if (!getRandomNormal()
            .equals(other.getRandomNormal())) return false;
        break;
      case 3:
        if (getOnes()
            != other.getOnes()) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasFetchHigh()) {
      hash = (37 * hash) + FETCH_HIGH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getFetchHigh()));
    }
    if (hasFetchLow()) {
      hash = (37 * hash) + FETCH_LOW_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getFetchLow()));
    }
    hash = (37 * hash) + WEIGHT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getWeight()));
    hash = (37 * hash) + OFFSET_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getOffset()));
    switch (fetchMethodCase_) {
      case 1:
        hash = (37 * hash) + ATTRIBUTE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getAttributeName().hashCode();
        break;
      case 2:
        hash = (37 * hash) + RANDOM_NORMAL_FIELD_NUMBER;
        hash = (53 * hash) + getRandomNormal().hashCode();
        break;
      case 3:
        hash = (37 * hash) + ONES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOnes());
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static QualityScoreTerm parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static QualityScoreTerm parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static QualityScoreTerm parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static QualityScoreTerm parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static QualityScoreTerm parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static QualityScoreTerm parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static QualityScoreTerm parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static QualityScoreTerm parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static QualityScoreTerm parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static QualityScoreTerm parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static QualityScoreTerm parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static QualityScoreTerm parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(QualityScoreTerm prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Next ID = 14.
   * </pre>
   *
   * Protobuf type {@code delivery.QualityScoreTerm}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:delivery.QualityScoreTerm)
      QualityScoreTermOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Blender.internal_static_delivery_QualityScoreTerm_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Blender.internal_static_delivery_QualityScoreTerm_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              QualityScoreTerm.class, Builder.class);
    }

    // Construct using ai.promoted.proto.delivery.QualityScoreTerm.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      fetchHigh_ = 0D;
      bitField0_ = (bitField0_ & ~0x00000001);
      fetchLow_ = 0D;
      bitField0_ = (bitField0_ & ~0x00000002);
      weight_ = 0D;

      offset_ = 0D;

      fetchMethodCase_ = 0;
      fetchMethod_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Blender.internal_static_delivery_QualityScoreTerm_descriptor;
    }

    @Override
    public QualityScoreTerm getDefaultInstanceForType() {
      return QualityScoreTerm.getDefaultInstance();
    }

    @Override
    public QualityScoreTerm build() {
      QualityScoreTerm result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public QualityScoreTerm buildPartial() {
      QualityScoreTerm result = new QualityScoreTerm(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (fetchMethodCase_ == 1) {
        result.fetchMethod_ = fetchMethod_;
      }
      if (fetchMethodCase_ == 2) {
        if (randomNormalBuilder_ == null) {
          result.fetchMethod_ = fetchMethod_;
        } else {
          result.fetchMethod_ = randomNormalBuilder_.build();
        }
      }
      if (fetchMethodCase_ == 3) {
        result.fetchMethod_ = fetchMethod_;
      }
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.fetchHigh_ = fetchHigh_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.fetchLow_ = fetchLow_;
        to_bitField0_ |= 0x00000002;
      }
      result.weight_ = weight_;
      result.offset_ = offset_;
      result.bitField0_ = to_bitField0_;
      result.fetchMethodCase_ = fetchMethodCase_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof QualityScoreTerm) {
        return mergeFrom((QualityScoreTerm)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(QualityScoreTerm other) {
      if (other == QualityScoreTerm.getDefaultInstance()) return this;
      if (other.hasFetchHigh()) {
        setFetchHigh(other.getFetchHigh());
      }
      if (other.hasFetchLow()) {
        setFetchLow(other.getFetchLow());
      }
      if (other.getWeight() != 0D) {
        setWeight(other.getWeight());
      }
      if (other.getOffset() != 0D) {
        setOffset(other.getOffset());
      }
      switch (other.getFetchMethodCase()) {
        case ATTRIBUTE_NAME: {
          fetchMethodCase_ = 1;
          fetchMethod_ = other.fetchMethod_;
          onChanged();
          break;
        }
        case RANDOM_NORMAL: {
          mergeRandomNormal(other.getRandomNormal());
          break;
        }
        case ONES: {
          setOnes(other.getOnes());
          break;
        }
        case FETCHMETHOD_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      QualityScoreTerm parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (QualityScoreTerm) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int fetchMethodCase_ = 0;
    private Object fetchMethod_;
    public FetchMethodCase
        getFetchMethodCase() {
      return FetchMethodCase.forNumber(
          fetchMethodCase_);
    }

    public Builder clearFetchMethod() {
      fetchMethodCase_ = 0;
      fetchMethod_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     * <pre>
     * A named vector provided from elsewhere.
     * </pre>
     *
     * <code>string attribute_name = 1;</code>
     * @return Whether the attributeName field is set.
     */
    @Override
    public boolean hasAttributeName() {
      return fetchMethodCase_ == 1;
    }
    /**
     * <pre>
     * A named vector provided from elsewhere.
     * </pre>
     *
     * <code>string attribute_name = 1;</code>
     * @return The attributeName.
     */
    @Override
    public String getAttributeName() {
      Object ref = "";
      if (fetchMethodCase_ == 1) {
        ref = fetchMethod_;
      }
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (fetchMethodCase_ == 1) {
          fetchMethod_ = s;
        }
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * A named vector provided from elsewhere.
     * </pre>
     *
     * <code>string attribute_name = 1;</code>
     * @return The bytes for attributeName.
     */
    @Override
    public com.google.protobuf.ByteString
        getAttributeNameBytes() {
      Object ref = "";
      if (fetchMethodCase_ == 1) {
        ref = fetchMethod_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        if (fetchMethodCase_ == 1) {
          fetchMethod_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A named vector provided from elsewhere.
     * </pre>
     *
     * <code>string attribute_name = 1;</code>
     * @param value The attributeName to set.
     * @return This builder for chaining.
     */
    public Builder setAttributeName(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  fetchMethodCase_ = 1;
      fetchMethod_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A named vector provided from elsewhere.
     * </pre>
     *
     * <code>string attribute_name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearAttributeName() {
      if (fetchMethodCase_ == 1) {
        fetchMethodCase_ = 0;
        fetchMethod_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * A named vector provided from elsewhere.
     * </pre>
     *
     * <code>string attribute_name = 1;</code>
     * @param value The bytes for attributeName to set.
     * @return This builder for chaining.
     */
    public Builder setAttributeNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      fetchMethodCase_ = 1;
      fetchMethod_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        NormalDistribution, NormalDistribution.Builder, NormalDistributionOrBuilder> randomNormalBuilder_;
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     * @return Whether the randomNormal field is set.
     */
    @Override
    public boolean hasRandomNormal() {
      return fetchMethodCase_ == 2;
    }
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     * @return The randomNormal.
     */
    @Override
    public NormalDistribution getRandomNormal() {
      if (randomNormalBuilder_ == null) {
        if (fetchMethodCase_ == 2) {
          return (NormalDistribution) fetchMethod_;
        }
        return NormalDistribution.getDefaultInstance();
      } else {
        if (fetchMethodCase_ == 2) {
          return randomNormalBuilder_.getMessage();
        }
        return NormalDistribution.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     */
    public Builder setRandomNormal(NormalDistribution value) {
      if (randomNormalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fetchMethod_ = value;
        onChanged();
      } else {
        randomNormalBuilder_.setMessage(value);
      }
      fetchMethodCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     */
    public Builder setRandomNormal(
        NormalDistribution.Builder builderForValue) {
      if (randomNormalBuilder_ == null) {
        fetchMethod_ = builderForValue.build();
        onChanged();
      } else {
        randomNormalBuilder_.setMessage(builderForValue.build());
      }
      fetchMethodCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     */
    public Builder mergeRandomNormal(NormalDistribution value) {
      if (randomNormalBuilder_ == null) {
        if (fetchMethodCase_ == 2 &&
            fetchMethod_ != NormalDistribution.getDefaultInstance()) {
          fetchMethod_ = NormalDistribution.newBuilder((NormalDistribution) fetchMethod_)
              .mergeFrom(value).buildPartial();
        } else {
          fetchMethod_ = value;
        }
        onChanged();
      } else {
        if (fetchMethodCase_ == 2) {
          randomNormalBuilder_.mergeFrom(value);
        }
        randomNormalBuilder_.setMessage(value);
      }
      fetchMethodCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     */
    public Builder clearRandomNormal() {
      if (randomNormalBuilder_ == null) {
        if (fetchMethodCase_ == 2) {
          fetchMethodCase_ = 0;
          fetchMethod_ = null;
          onChanged();
        }
      } else {
        if (fetchMethodCase_ == 2) {
          fetchMethodCase_ = 0;
          fetchMethod_ = null;
        }
        randomNormalBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     */
    public NormalDistribution.Builder getRandomNormalBuilder() {
      return getRandomNormalFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     */
    @Override
    public NormalDistributionOrBuilder getRandomNormalOrBuilder() {
      if ((fetchMethodCase_ == 2) && (randomNormalBuilder_ != null)) {
        return randomNormalBuilder_.getMessageOrBuilder();
      } else {
        if (fetchMethodCase_ == 2) {
          return (NormalDistribution) fetchMethod_;
        }
        return NormalDistribution.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Randomly generated values from a normal distribution.
     * </pre>
     *
     * <code>.delivery.NormalDistribution random_normal = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        NormalDistribution, NormalDistribution.Builder, NormalDistributionOrBuilder>
        getRandomNormalFieldBuilder() {
      if (randomNormalBuilder_ == null) {
        if (!(fetchMethodCase_ == 2)) {
          fetchMethod_ = NormalDistribution.getDefaultInstance();
        }
        randomNormalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            NormalDistribution, NormalDistribution.Builder, NormalDistributionOrBuilder>(
                (NormalDistribution) fetchMethod_,
                getParentForChildren(),
                isClean());
        fetchMethod_ = null;
      }
      fetchMethodCase_ = 2;
      onChanged();;
      return randomNormalBuilder_;
    }

    /**
     * <pre>
     * A constant value of ones. Set to any constant with offset and/or weight.
     * Set to "true" to indicate that this option is set by convention.
     * </pre>
     *
     * <code>bool ones = 3;</code>
     * @return Whether the ones field is set.
     */
    public boolean hasOnes() {
      return fetchMethodCase_ == 3;
    }
    /**
     * <pre>
     * A constant value of ones. Set to any constant with offset and/or weight.
     * Set to "true" to indicate that this option is set by convention.
     * </pre>
     *
     * <code>bool ones = 3;</code>
     * @return The ones.
     */
    public boolean getOnes() {
      if (fetchMethodCase_ == 3) {
        return (Boolean) fetchMethod_;
      }
      return false;
    }
    /**
     * <pre>
     * A constant value of ones. Set to any constant with offset and/or weight.
     * Set to "true" to indicate that this option is set by convention.
     * </pre>
     *
     * <code>bool ones = 3;</code>
     * @param value The ones to set.
     * @return This builder for chaining.
     */
    public Builder setOnes(boolean value) {
      fetchMethodCase_ = 3;
      fetchMethod_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A constant value of ones. Set to any constant with offset and/or weight.
     * Set to "true" to indicate that this option is set by convention.
     * </pre>
     *
     * <code>bool ones = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearOnes() {
      if (fetchMethodCase_ == 3) {
        fetchMethodCase_ = 0;
        fetchMethod_ = null;
        onChanged();
      }
      return this;
    }

    private double fetchHigh_ ;
    /**
     * <pre>
     * Maximum limit of underlying value (before weight and offset).
     * </pre>
     *
     * <code>double fetch_high = 10;</code>
     * @return Whether the fetchHigh field is set.
     */
    @Override
    public boolean hasFetchHigh() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Maximum limit of underlying value (before weight and offset).
     * </pre>
     *
     * <code>double fetch_high = 10;</code>
     * @return The fetchHigh.
     */
    @Override
    public double getFetchHigh() {
      return fetchHigh_;
    }
    /**
     * <pre>
     * Maximum limit of underlying value (before weight and offset).
     * </pre>
     *
     * <code>double fetch_high = 10;</code>
     * @param value The fetchHigh to set.
     * @return This builder for chaining.
     */
    public Builder setFetchHigh(double value) {
      bitField0_ |= 0x00000001;
      fetchHigh_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum limit of underlying value (before weight and offset).
     * </pre>
     *
     * <code>double fetch_high = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearFetchHigh() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fetchHigh_ = 0D;
      onChanged();
      return this;
    }

    private double fetchLow_ ;
    /**
     * <pre>
     * Minimum limit of underlying value (before weight and offset).
     * </pre>
     *
     * <code>double fetch_low = 11;</code>
     * @return Whether the fetchLow field is set.
     */
    @Override
    public boolean hasFetchLow() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Minimum limit of underlying value (before weight and offset).
     * </pre>
     *
     * <code>double fetch_low = 11;</code>
     * @return The fetchLow.
     */
    @Override
    public double getFetchLow() {
      return fetchLow_;
    }
    /**
     * <pre>
     * Minimum limit of underlying value (before weight and offset).
     * </pre>
     *
     * <code>double fetch_low = 11;</code>
     * @param value The fetchLow to set.
     * @return This builder for chaining.
     */
    public Builder setFetchLow(double value) {
      bitField0_ |= 0x00000002;
      fetchLow_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Minimum limit of underlying value (before weight and offset).
     * </pre>
     *
     * <code>double fetch_low = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearFetchLow() {
      bitField0_ = (bitField0_ & ~0x00000002);
      fetchLow_ = 0D;
      onChanged();
      return this;
    }

    private double weight_ ;
    /**
     * <pre>
     * Multiply by this value. default =1 (no multiply).
     * </pre>
     *
     * <code>double weight = 12;</code>
     * @return The weight.
     */
    @Override
    public double getWeight() {
      return weight_;
    }
    /**
     * <pre>
     * Multiply by this value. default =1 (no multiply).
     * </pre>
     *
     * <code>double weight = 12;</code>
     * @param value The weight to set.
     * @return This builder for chaining.
     */
    public Builder setWeight(double value) {
      
      weight_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Multiply by this value. default =1 (no multiply).
     * </pre>
     *
     * <code>double weight = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearWeight() {
      
      weight_ = 0D;
      onChanged();
      return this;
    }

    private double offset_ ;
    /**
     * <pre>
     * Add by this value. default = 0 (no addition)
     * </pre>
     *
     * <code>double offset = 13;</code>
     * @return The offset.
     */
    @Override
    public double getOffset() {
      return offset_;
    }
    /**
     * <pre>
     * Add by this value. default = 0 (no addition)
     * </pre>
     *
     * <code>double offset = 13;</code>
     * @param value The offset to set.
     * @return This builder for chaining.
     */
    public Builder setOffset(double value) {
      
      offset_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Add by this value. default = 0 (no addition)
     * </pre>
     *
     * <code>double offset = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearOffset() {
      
      offset_ = 0D;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:delivery.QualityScoreTerm)
  }

  // @@protoc_insertion_point(class_scope:delivery.QualityScoreTerm)
  private static final QualityScoreTerm DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new QualityScoreTerm();
  }

  public static QualityScoreTerm getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<QualityScoreTerm>
      PARSER = new com.google.protobuf.AbstractParser<QualityScoreTerm>() {
    @Override
    public QualityScoreTerm parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new QualityScoreTerm(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<QualityScoreTerm> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<QualityScoreTerm> getParserForType() {
    return PARSER;
  }

  @Override
  public QualityScoreTerm getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

