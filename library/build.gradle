plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'jacoco'
    id 'io.gitlab.arturbosch.detekt'
    id 'com.github.dawnwords.jacoco.badge' version "0.2.0"
}

ext {
    version = "1.0.0"
    PUBLISH_GROUP_ID = 'ai.promoted'
    PUBLISH_VERSION = version
    PUBLISH_ARTIFACT_ID = 'android-metrics-sdk'
}

apply from: "${rootDir}/scripts/publish-module.gradle"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName project.ext.version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        buildConfig false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests {
            all {
                jvmArgs '-noverify', '-ea'
                jacoco {
                    includeNoLocationClasses = true
                }
            }
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'

    implementation "io.insert-koin:koin-android:3.0.1"

    implementation 'androidx.core:core-ktx:1.3.2'

    // Protobuf is defined as api/transitive because the Promoted.Ai API allows passing of custom
    // protobuf objects
    api 'com.google.protobuf:protobuf-java:3.11.0'
    implementation 'com.google.protobuf:protobuf-java-util:3.11.0'

    // Provided to allow for scroll tracking of collections
    // Exclude this if scroll tracking is not needed
    implementation "androidx.recyclerview:recyclerview:1.2.0"

    // Provided to allow for default network stack
    // Exclude this if providing custom network stack
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // Optional Promoted add-ons
    compileOnly platform('com.google.firebase:firebase-bom:28.1.0')
    compileOnly 'com.google.firebase:firebase-analytics-ktx'
    compileOnly 'com.google.firebase:firebase-config-ktx'

    testImplementation 'junit:junit:4.+'
    testImplementation "io.mockk:mockk:1.11.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.3'

    // Make sure the optional Promoted add-ons are included when tests run
    testImplementation platform('com.google.firebase:firebase-bom:28.1.0')
    testImplementation 'com.google.firebase:firebase-analytics-ktx'
    testImplementation 'com.google.firebase:firebase-config-ktx'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*'] // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',

            // Exclude all no-operational classes that follow this convention
            'ai/promoted/**/NoOp*.*',

            // Exclude all classes that match the name "Internal*Data", as they are data
            // classes with no logic
            'ai/promoted/**/Internal*Data.*',

            // Exclude all top-level classes belonging to the ai.promoted package.
            // This is because these represent the public facing API and are intended to be
            // entirely delegating to internal classes, thus testing would have diminishing returns.
            'ai/promoted/*.class',

            // Exclude DI/Koin classes because testing factory-based logic is better verified via
            // integration/instrumented tests
            'ai/promoted/di/**/*.*',

            // Exclude classes in the "platform" package because they are primarily interfaces with
            // default implementations in order to aid in testability / DI
            'ai/promoted/platform/**/*.*',

            // This package is for SDK-related classes that are tightly coupled to the Android
            // View layer, which means unit testing is not feasible/valuable but rather UI tests
            // are
            'ai/promoted/ui/**/*.*',

            // We don't need to unit test logging functionality
            'ai/promoted/xray/**/*.*',

            // This package represents protobuf-generated classes that should not be unit tested
            'ai/promoted/proto/**/*.*'
    ]
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

jacocoBadgeGenSetting {
    jacocoReportPath  "library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    readmePath "README.md"
    // since v0.2.0, percentage limitation (0-100) for different type of coverage
    limit = ['instruction': 0, 'branch': 0, 'line': 0, 'method': 0, 'class': 0]
}
